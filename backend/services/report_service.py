"""
PDF report generation service for the Universal Consultant Intelligence Platform.

Provides professional PDF report generation with dynamic content, charts,
and customizable templates using ReportLab and Platypus framework.
"""

import io
import os
import time
from datetime import datetime
from typing import Dict, List, Optional, Tuple

import structlog
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_JUSTIFY, TA_LEFT, TA_RIGHT
from reportlab.lib.pagesizes import letter, A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.utils import ImageReader
from reportlab.pdfgen import canvas
from reportlab.platypus import (
    BaseDocTemplate, Frame, PageTemplate, Paragraph, Spacer, Table, TableStyle,
    Image, PageBreak, KeepTogether, NextPageTemplate
)
from pydantic import BaseModel

from backend.core.config import settings
from backend.core.logging import performance_logger
from backend.utils.exceptions import raise_external_service_error

logger = structlog.get_logger(__name__)


class ReportSection(BaseModel):
    """Report section model."""
    
    title: str
    content: str
    section_type: str  # text, table, chart, image
    data: Optional[Dict] = None
    style_overrides: Optional[Dict] = None


class ReportTemplate(BaseModel):
    """Report template configuration."""
    
    name: str
    title: str
    subtitle: Optional[str] = None
    logo_path: Optional[str] = None
    header_color: str = "#2E86C1"
    footer_text: str = "Generated by Universal Consultant Intelligence Platform"
    page_size: str = "letter"  # letter, A4
    margins: Dict[str, float] = {"top": 1.0, "bottom": 1.0, "left": 1.0, "right": 1.0}
    font_family: str = "Helvetica"


class GeneratedReport(BaseModel):
    """Generated report metadata."""
    
    report_id: str
    file_path: str
    file_size: int
    page_count: int
    generation_time: float
    template_used: str
    sections_count: int


class PDFReportService:
    """Professional PDF report generation service."""
    
    def __init__(self):
        self.reports_dir = os.path.join(settings.upload_dir, "reports")
        os.makedirs(self.reports_dir, exist_ok=True)
        
        # Initialize styles
        self.styles = getSampleStyleSheet()
        self._setup_custom_styles()
        
        # Chart colors and styling
        self.chart_colors = [
            colors.Color(0.2, 0.5, 0.8),  # Blue
            colors.Color(0.8, 0.4, 0.2),  # Orange
            colors.Color(0.4, 0.7, 0.3),  # Green
            colors.Color(0.7, 0.3, 0.5),  # Purple
            colors.Color(0.9, 0.6, 0.1),  # Yellow
        ]
    
    def _setup_custom_styles(self):
        """Setup custom paragraph and table styles."""
        
        # Title styles
        self.styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=self.styles['Title'],
            fontSize=24,
            textColor=colors.Color(0.18, 0.31, 0.31),
            spaceAfter=30,
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Section header style
        self.styles.add(ParagraphStyle(
            name='SectionHeader',
            parent=self.styles['Heading1'],
            fontSize=16,
            textColor=colors.Color(0.18, 0.52, 0.75),
            spaceBefore=20,
            spaceAfter=12,
            fontName='Helvetica-Bold'
        ))
        
        # Subsection header style
        self.styles.add(ParagraphStyle(
            name='SubsectionHeader',
            parent=self.styles['Heading2'],
            fontSize=14,
            textColor=colors.Color(0.25, 0.25, 0.25),
            spaceBefore=15,
            spaceAfter=8,
            fontName='Helvetica-Bold'
        ))
        
        # Body text style
        self.styles.add(ParagraphStyle(
            name='BodyText',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=colors.Color(0.2, 0.2, 0.2),
            spaceBefore=6,
            spaceAfter=6,
            alignment=TA_JUSTIFY,
            fontName='Helvetica'
        ))
        
        # Highlight style
        self.styles.add(ParagraphStyle(
            name='Highlight',
            parent=self.styles['Normal'],
            fontSize=11,
            textColor=colors.Color(0.8, 0.4, 0.2),
            spaceBefore=6,
            spaceAfter=6,
            fontName='Helvetica-Bold'
        ))
        
        # Footer style
        self.styles.add(ParagraphStyle(
            name='Footer',
            parent=self.styles['Normal'],
            fontSize=9,
            textColor=colors.Color(0.5, 0.5, 0.5),
            alignment=TA_CENTER,
            fontName='Helvetica'
        ))
    
    async def generate_prospect_intelligence_report(
        self,
        prospect_data: Dict,
        research_summary: Dict,
        signals: List[Dict],
        consultant_profile: Dict,
        template: Optional[ReportTemplate] = None
    ) -> GeneratedReport:
        """
        Generate comprehensive prospect intelligence report.
        
        Args:
            prospect_data: Prospect company information
            research_summary: AI-generated research synthesis
            signals: Discovered business signals
            consultant_profile: Consultant information
            template: Custom report template
            
        Returns:
            GeneratedReport: Report metadata and file information
        """
        
        start_time = time.time()
        
        try:
            logger.info(
                "Starting prospect intelligence report generation",
                prospect=prospect_data.get('name', 'Unknown'),
                signals_count=len(signals)
            )
            
            # Use default template if none provided
            if not template:
                template = ReportTemplate(
                    name="prospect_intelligence",
                    title="Prospect Intelligence Report",
                    subtitle=f"Analysis for {prospect_data.get('name', 'Unknown Company')}"
                )
            
            # Build report sections
            sections = self._build_prospect_report_sections(
                prospect_data, research_summary, signals, consultant_profile
            )
            
            # Generate PDF
            report_id = f"prospect_{prospect_data.get('id', 'unknown')}_{int(time.time())}"
            file_path = os.path.join(self.reports_dir, f"{report_id}.pdf")
            
            generated_report = await self._generate_pdf_document(
                sections, template, file_path, report_id
            )
            
            generation_time = time.time() - start_time
            
            performance_logger.log_external_api_call(
                service="pdf_generation",
                endpoint="prospect_intelligence",
                response_time=generation_time,
                status_code=200,
                prospect=prospect_data.get('name'),
                sections_count=len(sections),
                file_size=generated_report.file_size
            )
            
            logger.info(
                "Prospect intelligence report generated successfully",
                prospect=prospect_data.get('name'),
                report_id=report_id,
                generation_time=generation_time,
                file_size=generated_report.file_size,
                pages=generated_report.page_count
            )
            
            return generated_report
            
        except Exception as e:
            generation_time = time.time() - start_time
            logger.error(
                "Prospect intelligence report generation failed",
                prospect=prospect_data.get('name', 'Unknown'),
                generation_time=generation_time,
                error=str(e)
            )
            raise_external_service_error("PDF Generation", f"Report generation failed: {str(e)}")
    
    async def generate_signals_summary_report(
        self,
        signals_data: List[Dict],
        time_period: str,
        consultant_profile: Dict,
        template: Optional[ReportTemplate] = None
    ) -> GeneratedReport:
        """
        Generate signals summary report for a time period.
        
        Args:
            signals_data: List of signals with metadata
            time_period: Time period for the report
            consultant_profile: Consultant information
            template: Custom report template
            
        Returns:
            GeneratedReport: Report metadata and file information
        """
        
        start_time = time.time()
        
        try:
            logger.info(
                "Starting signals summary report generation",
                period=time_period,
                signals_count=len(signals_data)
            )
            
            # Use default template if none provided
            if not template:
                template = ReportTemplate(
                    name="signals_summary",
                    title="Business Signals Summary",
                    subtitle=f"Intelligence Report - {time_period}"
                )
            
            # Build report sections
            sections = self._build_signals_report_sections(
                signals_data, time_period, consultant_profile
            )
            
            # Generate PDF
            report_id = f"signals_{time_period}_{int(time.time())}"
            file_path = os.path.join(self.reports_dir, f"{report_id}.pdf")
            
            generated_report = await self._generate_pdf_document(
                sections, template, file_path, report_id
            )
            
            generation_time = time.time() - start_time
            
            performance_logger.log_external_api_call(
                service="pdf_generation",
                endpoint="signals_summary",
                response_time=generation_time,
                status_code=200,
                period=time_period,
                signals_count=len(signals_data),
                file_size=generated_report.file_size
            )
            
            return generated_report
            
        except Exception as e:
            generation_time = time.time() - start_time
            logger.error(
                "Signals summary report generation failed",
                period=time_period,
                generation_time=generation_time,
                error=str(e)
            )
            raise_external_service_error("PDF Generation", f"Signals report generation failed: {str(e)}")
    
    async def _generate_pdf_document(
        self,
        sections: List[ReportSection],
        template: ReportTemplate,
        file_path: str,
        report_id: str
    ) -> GeneratedReport:
        """Generate the actual PDF document using Platypus."""
        
        # Create document
        page_size = A4 if template.page_size == "A4" else letter
        doc = BaseDocTemplate(
            file_path,
            pagesize=page_size,
            topMargin=template.margins["top"] * inch,
            bottomMargin=template.margins["bottom"] * inch,
            leftMargin=template.margins["left"] * inch,
            rightMargin=template.margins["right"] * inch
        )
        
        # Create frame and page template
        frame = Frame(
            doc.leftMargin,
            doc.bottomMargin,
            doc.width,
            doc.height,
            id='normal'
        )
        
        page_template = PageTemplate(
            id='normal',
            frames=[frame],
            onPage=lambda canvas, doc: self._draw_page_header_footer(
                canvas, doc, template
            )
        )
        
        doc.addPageTemplates([page_template])
        
        # Build document content
        story = []
        
        # Title page
        story.extend(self._build_title_page(template))
        story.append(PageBreak())
        
        # Table of contents
        story.extend(self._build_table_of_contents(sections))
        story.append(PageBreak())
        
        # Report sections
        for section in sections:
            story.extend(self._build_section_content(section))
            story.append(Spacer(1, 20))
        
        # Build PDF
        doc.build(story)
        
        # Get file information
        file_size = os.path.getsize(file_path)
        
        # Count pages (approximate)
        page_count = max(1, len(sections) + 2)  # sections + title + toc
        
        return GeneratedReport(
            report_id=report_id,
            file_path=file_path,
            file_size=file_size,
            page_count=page_count,
            generation_time=time.time(),
            template_used=template.name,
            sections_count=len(sections)
        )
    
    def _build_prospect_report_sections(
        self,
        prospect_data: Dict,
        research_summary: Dict,
        signals: List[Dict],
        consultant_profile: Dict
    ) -> List[ReportSection]:
        """Build sections for prospect intelligence report."""
        
        sections = []
        
        # Executive Summary
        sections.append(ReportSection(
            title="Executive Summary",
            content=research_summary.get('executive_summary', 'No summary available'),
            section_type="text"
        ))
        
        # Company Overview
        company_overview = f"""
        <b>Company:</b> {prospect_data.get('name', 'Unknown')}<br/>
        <b>Industry:</b> {prospect_data.get('industry', 'Unknown')}<br/>
        <b>Size:</b> {prospect_data.get('size', 'Unknown')}<br/>
        <b>Location:</b> {prospect_data.get('location', 'Unknown')}<br/>
        <b>Website:</b> {prospect_data.get('website', 'Unknown')}<br/><br/>
        {prospect_data.get('description', 'No description available')}
        """
        
        sections.append(ReportSection(
            title="Company Overview",
            content=company_overview,
            section_type="text"
        ))
        
        # Key Findings
        findings_content = "<br/>".join([
            f"" {finding}" for finding in research_summary.get('key_findings', [])
        ])
        
        sections.append(ReportSection(
            title="Key Findings",
            content=findings_content,
            section_type="text"
        ))
        
        # Business Signals Analysis
        if signals:
            signals_content = self._format_signals_content(signals)
            sections.append(ReportSection(
                title="Business Signals Analysis",
                content=signals_content,
                section_type="table",
                data={"signals": signals}
            ))
        
        # Recommended Actions
        actions_content = "<br/>".join([
            f"" {action}" for action in research_summary.get('recommended_actions', [])
        ])
        
        sections.append(ReportSection(
            title="Recommended Actions",
            content=actions_content,
            section_type="text"
        ))
        
        # Engagement Strategy
        strategy_content = f"""
        Based on the analysis above, here is the recommended engagement strategy for 
        {prospect_data.get('name', 'this prospect')}:
        
        <b>Primary Value Proposition:</b> {consultant_profile.get('solution_positioning', 'Value creation')}
        
        <b>Key Talking Points:</b>
        " Focus on {consultant_profile.get('industry_focus', 'business improvement')} opportunities
        " Leverage insights from recent business signals
        " Position expertise in {', '.join(consultant_profile.get('signal_priorities', [])[:3])}
        
        <b>Next Steps:</b>
        " Initial outreach within 48 hours
        " Prepare customized proposal based on identified signals
        " Schedule discovery call to validate assumptions
        """
        
        sections.append(ReportSection(
            title="Engagement Strategy",
            content=strategy_content,
            section_type="text"
        ))
        
        return sections
    
    def _build_signals_report_sections(
        self,
        signals_data: List[Dict],
        time_period: str,
        consultant_profile: Dict
    ) -> List[ReportSection]:
        """Build sections for signals summary report."""
        
        sections = []
        
        # Signals Overview
        overview_content = f"""
        This report summarizes {len(signals_data)} business signals discovered during {time_period}.
        The signals have been analyzed and prioritized based on your consultant profile and expertise areas.
        
        <b>Analysis Period:</b> {time_period}<br/>
        <b>Total Signals:</b> {len(signals_data)}<br/>
        <b>High Priority Signals:</b> {len([s for s in signals_data if s.get('priority_score', 0) > 0.7])}<br/>
        <b>Focus Areas:</b> {', '.join(consultant_profile.get('signal_priorities', []))}<br/>
        """
        
        sections.append(ReportSection(
            title="Signals Overview",
            content=overview_content,
            section_type="text"
        ))
        
        # Priority Signals
        high_priority = [s for s in signals_data if s.get('priority_score', 0) > 0.7]
        if high_priority:
            priority_content = self._format_priority_signals(high_priority)
            sections.append(ReportSection(
                title="High Priority Signals",
                content=priority_content,
                section_type="table",
                data={"signals": high_priority}
            ))
        
        # Signal Categories
        categories = {}
        for signal in signals_data:
            signal_type = signal.get('type', 'unknown')
            if signal_type not in categories:
                categories[signal_type] = []
            categories[signal_type].append(signal)
        
        for category, category_signals in categories.items():
            category_content = f"""
            <b>{category.title()} Signals ({len(category_signals)} found)</b><br/><br/>
            """ + self._format_category_signals(category_signals)
            
            sections.append(ReportSection(
                title=f"{category.title()} Analysis",
                content=category_content,
                section_type="text"
            ))
        
        return sections
    
    def _build_title_page(self, template: ReportTemplate) -> List:
        """Build title page elements."""
        
        elements = []
        
        # Logo if provided
        if template.logo_path and os.path.exists(template.logo_path):
            logo = Image(template.logo_path, width=2*inch, height=1*inch)
            elements.append(logo)
            elements.append(Spacer(1, 30))
        
        # Title
        title = Paragraph(template.title, self.styles['CustomTitle'])
        elements.append(title)
        elements.append(Spacer(1, 20))
        
        # Subtitle
        if template.subtitle:
            subtitle = Paragraph(template.subtitle, self.styles['SectionHeader'])
            elements.append(subtitle)
            elements.append(Spacer(1, 30))
        
        # Generation info
        generation_info = f"""
        <b>Generated:</b> {datetime.now().strftime('%B %d, %Y at %I:%M %p')}<br/>
        <b>Platform:</b> Universal Consultant Intelligence Platform<br/>
        """
        
        info_para = Paragraph(generation_info, self.styles['BodyText'])
        elements.append(Spacer(1, 50))
        elements.append(info_para)
        
        return elements
    
    def _build_table_of_contents(self, sections: List[ReportSection]) -> List:
        """Build table of contents."""
        
        elements = []
        
        # TOC Title
        toc_title = Paragraph("Table of Contents", self.styles['SectionHeader'])
        elements.append(toc_title)
        elements.append(Spacer(1, 20))
        
        # TOC Entries
        toc_data = []
        page_num = 3  # Start after title and TOC pages
        
        for section in sections:
            toc_data.append([section.title, f"Page {page_num}"])
            page_num += 1
        
        toc_table = Table(toc_data, colWidths=[4*inch, 1*inch])
        toc_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 11),
            ('LEFTPADDING', (0, 0), (-1, -1), 0),
            ('RIGHTPADDING', (0, 0), (-1, -1), 0),
            ('VALIGN', (0, 0), (-1, -1), 'TOP'),
            ('DOTTED', (0, 0), (-1, -1), 1, colors.grey)
        ]))
        
        elements.append(toc_table)
        
        return elements
    
    def _build_section_content(self, section: ReportSection) -> List:
        """Build content elements for a section."""
        
        elements = []
        
        # Section title
        title = Paragraph(section.title, self.styles['SectionHeader'])
        elements.append(title)
        elements.append(Spacer(1, 12))
        
        # Section content based on type
        if section.section_type == "text":
            content_para = Paragraph(section.content, self.styles['BodyText'])
            elements.append(content_para)
            
        elif section.section_type == "table" and section.data:
            # Build table from data
            table_elements = self._build_data_table(section.data)
            elements.extend(table_elements)
            
        elif section.section_type == "chart" and section.data:
            # Build chart (placeholder for now)
            chart_para = Paragraph(
                "<i>Chart visualization would be rendered here</i>",
                self.styles['BodyText']
            )
            elements.append(chart_para)
        
        return elements
    
    def _build_data_table(self, data: Dict) -> List:
        """Build table elements from data."""
        
        elements = []
        
        if "signals" in data:
            signals = data["signals"]
            
            # Build signals table
            table_data = [["Signal Type", "Company", "Priority", "Description"]]
            
            for signal in signals[:10]:  # Limit to 10 signals
                table_data.append([
                    signal.get('type', 'Unknown').title(),
                    signal.get('company', 'Unknown'),
                    f"{signal.get('priority_score', 0):.1f}",
                    signal.get('description', signal.get('match', 'No description'))[:50] + "..."
                ])
            
            signals_table = Table(table_data, colWidths=[1.2*inch, 1.5*inch, 0.8*inch, 2.5*inch])
            signals_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.Color(0.18, 0.52, 0.75)),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 9),
                ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black),
                ('VALIGN', (0, 0), (-1, -1), 'TOP')
            ]))
            
            elements.append(signals_table)
        
        return elements
    
    def _format_signals_content(self, signals: List[Dict]) -> str:
        """Format signals data as HTML content."""
        
        content_parts = []
        
        for signal in signals[:5]:  # Show top 5 signals
            content_parts.append(f"""
            <b>{signal.get('type', 'Unknown').title()} Signal</b><br/>
            Priority Score: {signal.get('priority_score', 0):.1f}/1.0<br/>
            Description: {signal.get('description', signal.get('match', 'No description'))}<br/>
            Context: {signal.get('context', 'No context available')}<br/>
            <br/>
            """)
        
        return "".join(content_parts)
    
    def _format_priority_signals(self, signals: List[Dict]) -> str:
        """Format high priority signals."""
        
        content_parts = []
        
        for signal in signals:
            content_parts.append(f"""
            <b>{signal.get('company', 'Unknown Company')}</b> - {signal.get('type', 'Unknown').title()}<br/>
            Priority: {signal.get('priority_score', 0):.1f}/1.0<br/>
            Impact: {signal.get('business_impact', 'Unknown impact')}<br/>
            <br/>
            """)
        
        return "".join(content_parts)
    
    def _format_category_signals(self, signals: List[Dict]) -> str:
        """Format signals by category."""
        
        content_parts = []
        
        for signal in signals[:3]:  # Show top 3 per category
            content_parts.append(f"""
            " <b>{signal.get('company', 'Unknown')}</b>: {signal.get('description', signal.get('match', 'No description'))}<br/>
            """)
        
        if len(signals) > 3:
            content_parts.append(f"<i>... and {len(signals) - 3} more signals in this category</i><br/>")
        
        return "".join(content_parts)
    
    def _draw_page_header_footer(self, canvas, doc, template: ReportTemplate):
        """Draw page header and footer."""
        
        canvas.saveState()
        
        # Header
        canvas.setFillColor(colors.Color(0.18, 0.52, 0.75))
        canvas.rect(doc.leftMargin, doc.height + doc.bottomMargin + 10, 
                   doc.width, 0.5*inch, fill=1)
        
        canvas.setFillColor(colors.white)
        canvas.setFont('Helvetica-Bold', 12)
        canvas.drawString(doc.leftMargin + 10, doc.height + doc.bottomMargin + 25, 
                         template.title)
        
        # Footer
        canvas.setFillColor(colors.grey)
        canvas.setFont('Helvetica', 9)
        canvas.drawCentredText(doc.width/2 + doc.leftMargin, 
                              doc.bottomMargin - 30, 
                              template.footer_text)
        
        canvas.drawRightString(doc.width + doc.leftMargin - 10, 
                              doc.bottomMargin - 30, 
                              f"Page {canvas.getPageNumber()}")
        
        canvas.restoreState()


# Global service instance
report_service = PDFReportService()